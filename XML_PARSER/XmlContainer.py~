import xml.etree.ElementTree
import os
import copy
from enum import Enum


# Rename SimpleXmlTree   ??
class XmlContainer(object):

    # If you want to create a new .xml:
    # - set create to True
    # - define your root_tag (eg. <node> in above)
    def __init__(self, xmlfile, create=False, root_tag=""):
        self.xmlfile = xmlfile
   
        # Check that file exists:
        if os.path.exists(self.xmlfile):
            # Check we have R/W access:
            f = open(self.xmlfile, 'rw')  
            # Throws xml.etree.ElementTree.ParseError if input xml is malformed or empty file:
            self.et = xml.etree.ElementTree.parse(self.xmlfile) 
                 
        elif (create and len(root_tag) > 0):
            f = open(self.xmlfile, 'a+')
            root =  xml.etree.ElementTree.Element(root_tag)
            self.et = xml.etree.ElementTree.ElementTree(root)  
        else:
            # FIXME:
            raise IOError("Error: invalid arguments provided")     
          
        f.close()
        

    def getRoot(self):
        return XmlNode(self.et.getroot())


    def update(self, indentwidth=2):
        f = open(self.xmlfile, 'w+') 
        f.write(self.getRoot().dump(indentwidth))
        f.close()
        

class VisitorType(Enum):
    singlevisitor = 0
    rootvisitor = 1
    depthfirst = 2
    breadthfirst = 3


class XmlNodeVisitor(object):

    def __init__(self, ignore_tags=None,inverse=False):
        if ignore_tags is not None:
            self.ignore_tags = ignore_tags              # The tags of nodes to ignore
        else:
            self.ignore_tags = []
        self.inverse = inverse                          # Inverse ignore, ie. the ignore_tags becomes 'support_only' tags  
        self.queue = []

    def invert(self, b):
        if self.inverse:
            return not b
        return b

    def willVisit(self, node):
        if node.getTag() not in self.ignore_tags:
            return self.invert(True)
        return self.invert(False)

    def visit(self, node):
        # FIXME: try/except or return some kind of status???
        node.visit(self)


    def visit2(self, node):
        # Visit this node and all children using a XmlNodeVisitor

        # Should visitor visit this node?
        if self.isVisiting(node):

            # Pre-visit this node
            if hasattr(self, 'previsit'):              
                self.previsit(node)    

            if self.visitorType == VisitorType.rootvisitor:
                if node.parent is not None:
                    self.visit2(node.parent)

            elif self.visitorType == VisitorType.depthfirst:
                for child in node:
                    self.visit2(child)

            elif self.visitorType == VisitorType.breadthfirst:      # TOUGH .. how??
                visitor = XmlNodeVisitor(VisitorType.singlevisitor, self.ignore_tags, self.inverse)
                for child in node:
                    visitor.visit2(child)
                for child in node:
                    self.visit2(child)
 
            # Visit this node's children
            #for node in self:                
            #    node.visit(visitor)

            # Post-visit this node
            if hasattr(self, 'postvisit'):              
                visitor.postvisit(node)   



class XmlNode(object):

    def __init__(self, node, tag=None, val=None):
        self.parent = None
        # Create XmlNode from existing xml.etree.ElementTree.Element:
        if node is not None:
            self.node = node
        # Else create a brand new XmlNode:
        elif tag is not None:
            self.node = xml.etree.ElementTree.Element(tag)
            if val is not None:
                if len(str(val).strip()) > 0:
                    self.node.text = str(val).strip()
        else:
            # FIXME:
            raise Exception

    #########################################################################################################
    # PRIVATE TREE FUNCTIONALITY

    # FIXME: need a remove() (opposite to append), and dump()

    # Make this class iterable, ie.
    # for node in self:
    #     ...
    def __iter__(self):
        # This is cool: return an iterator of XmlNode objects, each one instantiated from the iterable self.node!
        #return iter(map(XmlNode, self.node))
        children = []
        for n in self.node:
            node = XmlNode(n)
            node.parent = self
            children.append(node)
        return iter(children)

    def __len__(self):
        return len(self.node)
        #return len(self.children)

    def __str__(self):
        return self.strformat1()

    def strformat1(self, indentwidth=2, indentcount=0):
        s = ""
        s += self.getIndentStr(indentwidth, indentcount) + "<%s>"%(self.getTag())
        if self.hasVal():
            s += "%s"%(self.getVal()) 
        s += "\n"
        for c in self:
            s += c.strformat1(indentwidth, (indentcount + 1))
        s += self.getIndentStr(indentwidth, indentcount) + "</%s>\n"%(self.getTag())
        return s

    # Add children to this node.
    def add(self, children):
        for c in children:
            c.parent = self
            self.node.append(c.node)

    def getIndentStr(self, indentwidth, indentcount):
        s1 = ""
        s2 = ""
        i = 0     
        while i < indentwidth:
            s1 += " "
            i += 1
        i = 0 
        while i < indentcount:
            s2 += s1
            i += 1
        return s2

    #########################################################################################################
    # PUBLIC TREE FUNCTIONALITY

    # Return the "node" part of: <node> val </node>
    def getTag(self):
        return self.node.tag

    # Return the "val" part of: <node> val </node>
    def getVal(self):
        return self.node.text.strip()

    # Sets val of this node
    def setVal(self, val):
        if (len(str(val).strip()) > 0):
            self.node.text = str(val).strip()

    # Is there a "val" part of:<node> val </node>
    # A whitespace val will return: False
    def hasVal(self):
        if self.node.text is None:
            return False
        elif len((self.node.text).strip()) == 0:
            return False
        return True

    def dump(self, indentwidth=2):
        return self.strformat1(indentwidth)

    # Am I a root node (ie. I have no parent)?
    def isRoot(self):
        if self.parent is None:
            return True
        return False

    # Am I a parent node (ie. I have children)?
    def isParent(self):
        if len(self) > 0:
            return True
        return False

    # Am I a child node (ie. I have no children)?
    def isChild(self):
        return not self.isParent()

    # Return my parent.
    def getParent(self):
        return self.parent

    # Return a list of my siblings.
    def getSiblings(self):
        siblings = []
        if self.parent is None:
            for c in self.parent:
                if c is not self:
                    siblings.append(c)
        return siblings

    # Return the first child node with a given tag, and (optionally) val.
    def getChild(self, tag, val=None):
        for c in self:
            if c.getTag() == tag:
                if val is None:
                    return c
                elif c.hasVal():
                    if str(val) == c.getVal():
                        return c
        return None

    # Do I have a child node of given tag, and (optionally) val?
    def hasChild(self, tag, val=None):
        c = self.getChild(tag, val)
        if c is None:
            return False
        return True
 
    # Return a list of all children nodes or ones with a given tag.
    def getChildrent(self, tag=None):
        children = []
        for c in self:
            if (c.getTag() == tag) or (tag is None):
                children.append(c)
        return children

    # Return the count of all children nodes or ones with a given tag.
    def getChildCount(self, tag=None):
        return len(self.getChildren(tag))

    # Return the val of the first child node found with a given tag.
    def getChildVal(self, tag):
        c = self.getChild(tag)
        if c is not None:
            return c.getVal()        # FIXME : should be .strip() ??
        return None

    
    # Visit this node and all children using a XmlNodeVisitor
    def visit(self, visitor):

        # Should visitor visit this node?
        if visitor.willVisit(self):

            # Pre-visit this node
            if hasattr(visitor, 'previsit'):              
                visitor.previsit(self)    

            # Visit this node's children
            for node in self:                
                node.visit(visitor)

            # Post-visit this node
            if hasattr(visitor, 'postvisit'):              
                visitor.postvisit(self)   

    #########################################################################################################
    # EXTENDED TREE FUNCTIONS

    # Gets an existing child node or creates/adds/returns one.
    def getOrAddChild(self, tag, val=None):
        c = self.getChild(tag, val)
        if c is None:
            c = XmlNode(None, tag, val)
            self.add([c])
        return c

    # Gets a grandchild node of given tag (first one found) and optionally val.
    def getGrandChild(self, tag, val=None):
        grandChild = None
        for c in self:
            grandChild = c.getChild(tag, val)
            if grandChild is not None:
                break
        return grandChild

    # Has a grandchild node of given tag (first one found) and optionally val?
    def hasGrandChild(self, tag, val=None):
        grandChild = self.getGrandChild(tag, val)
        if grandChild is None:
            return False
        return True

    # Returns a copy of this node (and its subtree):
    def clone(self):
        return XmlNode(copy.deepcopy(self.node))
       



    




