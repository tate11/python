The QRDecoder python script is used to decode files generated by the 
corresponding QREncoder bash script which are printed and scanned
onto other systems.

For instance, draw your attention to the contents inside the folder 
'example'. Look at 'test.pdf' for instance. Looking at this file, 
one can see it contains a bunch of QR codes arranged in a table, across 
multiple pages. This file represents a typical scan of the printed output 
of the QREncoder tool.

QRDecoder assumes that the logical order of these QR codes is row-by-row 
(from the top), and left to right within each row.

QRDecoder attempts to decode each QR code in logical order, and then
reassemble all the decoded data bits into a single file.

If your starting point is a file such as 'test.pdf', then you need to
initially convert it to a series of .png files using ImageMagick's 
convert utility.

For example, here's how we generated 'example/test/test-0.png' and 'example/test/test-1.png':

$ convert -density 600 -depth 1 -quality 100 test.pdf test.png

Note that:

- 'density' specifies something similar to DPI (dots per inch)
- 'depth' is the number of bits required to encode a pixel (?)
- 'quality' is how much compression to apply (1 means highest compression and therefore loss, and 
                                              100 means no compression and loss) 

Extra note:

If your input .pdf is in colour, you have to additionally pass '-type Grayscale'
in order for the output .png files to be in black & white.

Moving right along: 

Given our directory 'example/test' with the .png files, we can now invoke QRDecoder as follows: 

$ python Driver.py -v -d test -o out_test -x decoded.txt

The verbose output is presented below for reference. The decoded data is logically assembled
into the file: 'decoded.txt'. It represents base64 encoded text data. Assuming we know that it 
should decode to an image, we do this to recover the image:

$ base64 -d decoded.txt > image.jpg

If we didn't know what the binary data was, we could always do something like this:

$ base64 -d decoded.txt > blob.bin
$ file blob.bin
blob.bin: JPEG image data, JFIF standard 1.01

Profit!

FAQ appears right at the bottom of this file.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------
Image (test/test-0.png) (width, height) : (4961, 7016)
6 QR code rows have been identified between these Y coordinate pairings: [[210, 1255], [1300, 2343], [2388, 3432], [3476, 4520], [4564, 5606], [5650, 6696]]

    QR code row 1 image: out_test/test-0_png-row0.png
        4 QR codes have been identified between these X coordinate pairings: [[336, 1368], [1413, 2444], [2489, 3522], [3567, 4606]]

        Attempting to decode QR code: 1
            Image scaled @ (1012, 1024) contains payload of size: 13 bytes
            Image scaled @ (972, 982) contains payload of size: 13 bytes
            Image scaled @ (892, 898) contains payload of size: 2900 bytes
        QR code 1: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode0_data.txt

        Attempting to decode QR code: 2
            Image scaled @ (891, 898) contains payload of size: 2900 bytes
        QR code 2: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode1_data.txt

        Attempting to decode QR code: 3
            Image scaled @ (893, 898) contains payload of size: 2900 bytes
        QR code 3: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode2_data.txt

        Attempting to decode QR code: 4
            Image scaled @ (1039, 1045) contains payload of size: 8 bytes
            Image scaled @ (879, 879) contains payload of size: 2900 bytes
        QR code 4: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode3_data.txt

    QR code row 2 image: out_test/test-0_png-row1.png
        4 QR codes have been identified between these X coordinate pairings: [[336, 1367], [1413, 2443], [2488, 3520], [3566, 4605]]

        Attempting to decode QR code: 1
            Image scaled @ (911, 917) contains payload of size: 2900 bytes
        QR code 1: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode4_data.txt

        Attempting to decode QR code: 2
            Image scaled @ (730, 730) contains payload of size: 2900 bytes
        QR code 2: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode5_data.txt

        Attempting to decode QR code: 3
            Image scaled @ (912, 917) contains payload of size: 2900 bytes
        QR code 3: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode6_data.txt

        Attempting to decode QR code: 4
            Image scaled @ (899, 899) contains payload of size: 2900 bytes
        QR code 4: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode7_data.txt

    QR code row 3 image: out_test/test-0_png-row2.png
        4 QR codes have been identified between these X coordinate pairings: [[336, 1368], [1413, 2442], [2488, 3520], [3566, 4605]]

        Attempting to decode QR code: 1
            Image scaled @ (852, 855) contains payload of size: 2900 bytes
        QR code 1: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode8_data.txt

        Attempting to decode QR code: 2
            Image scaled @ (869, 876) contains payload of size: 2900 bytes
        QR code 2: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode9_data.txt

        Attempting to decode QR code: 3
            Image scaled @ (852, 855) contains payload of size: 2900 bytes
        QR code 3: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode10_data.txt

        Attempting to decode QR code: 4
            Image scaled @ (899, 899) contains payload of size: 2900 bytes
        QR code 4: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode11_data.txt

    QR code row 4 image: out_test/test-0_png-row3.png
        4 QR codes have been identified between these X coordinate pairings: [[337, 1369], [1414, 2443], [2489, 3520], [3566, 4605]]

        Attempting to decode QR code: 1
            Image scaled @ (912, 918) contains payload of size: 2900 bytes
        QR code 1: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode12_data.txt

        Attempting to decode QR code: 2
            Image scaled @ (909, 918) contains payload of size: 2900 bytes
        QR code 2: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode13_data.txt

        Attempting to decode QR code: 3
            Image scaled @ (851, 855) contains payload of size: 2900 bytes
        QR code 3: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode14_data.txt

        Attempting to decode QR code: 4
            Image scaled @ (899, 899) contains payload of size: 2900 bytes
        QR code 4: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode15_data.txt

    QR code row 5 image: out_test/test-0_png-row4.png
        4 QR codes have been identified between these X coordinate pairings: [[340, 1372], [1416, 2445], [2490, 3521], [3567, 4605]]

        Attempting to decode QR code: 1
            Image scaled @ (912, 916) contains payload of size: 2900 bytes
        QR code 1: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode16_data.txt

        Attempting to decode QR code: 2
            Image scaled @ (909, 916) contains payload of size: 2900 bytes
        QR code 2: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode17_data.txt

        Attempting to decode QR code: 3
            Image scaled @ (911, 916) contains payload of size: 2900 bytes
        QR code 3: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode18_data.txt

        Attempting to decode QR code: 4
            Image scaled @ (878, 878) contains payload of size: 2900 bytes
        QR code 4: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode19_data.txt

    QR code row 6 image: out_test/test-0_png-row5.png
        4 QR codes have been identified between these X coordinate pairings: [[344, 1374], [1418, 2447], [2492, 3522], [3568, 4605]]

        Attempting to decode QR code: 1
            Image scaled @ (890, 899) contains payload of size: 2900 bytes
        QR code 1: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode20_data.txt

        Attempting to decode QR code: 2
            Image scaled @ (889, 899) contains payload of size: 2900 bytes
        QR code 2: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode21_data.txt

        Attempting to decode QR code: 3
            Image scaled @ (890, 899) contains payload of size: 2900 bytes
        QR code 3: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode22_data.txt

        Attempting to decode QR code: 4
            Image scaled @ (897, 899) contains payload of size: 2900 bytes
        QR code 4: SUCCESSFUL: decoded QR code to: out_test/test-0_png-qrcode23_data.txt

Total QR codes found: 24
Successful decodings: 24
Error count: 0
Writing: out_test/test-0_png-decoded.txt

------------------------------------------------------------------------------------------------------------------------------------
Image (test/test-1.png) (width, height) : (4961, 7016)
6 QR code rows have been identified between these Y coordinate pairings: [[194, 1246], [1284, 2333], [2372, 3422], [3461, 4509], [4549, 5595], [5635, 6678]]

    QR code row 1 image: out_test/test-1_png-row0.png
        4 QR codes have been identified between these X coordinate pairings: [[337, 1371], [1414, 2448], [2490, 3528], [3570, 4610]]

        Attempting to decode QR code: 1
            Image scaled @ (894, 905) contains payload of size: 2900 bytes
        QR code 1: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode0_data.txt

        Attempting to decode QR code: 2
            Image scaled @ (894, 905) contains payload of size: 2900 bytes
        QR code 2: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode1_data.txt

        Attempting to decode QR code: 3
            Image scaled @ (878, 884) contains payload of size: 2900 bytes
        QR code 3: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode2_data.txt

        Attempting to decode QR code: 4
            Image scaled @ (900, 905) contains payload of size: 2900 bytes
        QR code 4: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode3_data.txt

    QR code row 2 image: out_test/test-1_png-row1.png
        4 QR codes have been identified between these X coordinate pairings: [[334, 1367], [1411, 2443], [2486, 3523], [3566, 4606]]

        Attempting to decode QR code: 1
            Image scaled @ (913, 923) contains payload of size: 2900 bytes
        QR code 1: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode4_data.txt

        Attempting to decode QR code: 2
            Image scaled @ (1012, 1028) contains payload of size: 8 bytes
            Image scaled @ (912, 923) contains payload of size: 2900 bytes
        QR code 2: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode5_data.txt

        Attempting to decode QR code: 3
            Image scaled @ (917, 923) contains payload of size: 2900 bytes
        QR code 3: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode6_data.txt

        Attempting to decode QR code: 4
            Image scaled @ (900, 902) contains payload of size: 2900 bytes
        QR code 4: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode7_data.txt

    QR code row 3 image: out_test/test-1_png-row2.png
        4 QR codes have been identified between these X coordinate pairings: [[333, 1363], [1408, 2439], [2483, 3518], [3562, 4602]]

        Attempting to decode QR code: 1
            Image scaled @ (910, 924) contains payload of size: 2900 bytes
        QR code 1: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode8_data.txt

        Attempting to decode QR code: 2
            Image scaled @ (891, 903) contains payload of size: 2900 bytes
        QR code 2: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode9_data.txt

        Attempting to decode QR code: 3
            Image scaled @ (915, 924) contains payload of size: 2900 bytes
        QR code 3: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode10_data.txt

        Attempting to decode QR code: 4
            Image scaled @ (900, 903) contains payload of size: 2900 bytes
        QR code 4: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode11_data.txt

    QR code row 4 image: out_test/test-1_png-row3.png
        4 QR codes have been identified between these X coordinate pairings: [[333, 1361], [1407, 2436], [2481, 3515], [3560, 4599]]

        Attempting to decode QR code: 1
            Image scaled @ (868, 880) contains payload of size: 2900 bytes
        QR code 1: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode12_data.txt

        Attempting to decode QR code: 2
            Image scaled @ (869, 880) contains payload of size: 2900 bytes
        QR code 2: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode13_data.txt

        Attempting to decode QR code: 3
            Image scaled @ (874, 880) contains payload of size: 2900 bytes
        QR code 3: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode14_data.txt

        Attempting to decode QR code: 4
            Image scaled @ (879, 880) contains payload of size: 2900 bytes
        QR code 4: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode15_data.txt

    QR code row 5 image: out_test/test-1_png-row4.png
        4 QR codes have been identified between these X coordinate pairings: [[333, 1360], [1406, 2434], [2479, 3512], [3557, 4595]]

        Attempting to decode QR code: 1
            Image scaled @ (787, 794) contains payload of size: 2900 bytes
        QR code 1: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode16_data.txt

        Attempting to decode QR code: 2
            Image scaled @ (908, 920) contains payload of size: 2900 bytes
        QR code 2: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode17_data.txt

        Attempting to decode QR code: 3
            Image scaled @ (913, 920) contains payload of size: 2900 bytes
        QR code 3: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode18_data.txt

        Attempting to decode QR code: 4
            Image scaled @ (858, 858) contains payload of size: 2900 bytes
        QR code 4: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode19_data.txt

    QR code row 6 image: out_test/test-1_png-row5.png
        2 QR codes have been identified between these X coordinate pairings: [[335, 1360], [1406, 1993]]

        Attempting to decode QR code: 1
            Image scaled @ (885, 896) contains payload of size: 2900 bytes
        QR code 1: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode20_data.txt

        Attempting to decode QR code: 2
            Image scaled @ (587, 1043) contains payload of size: 858 bytes
            Image scaled @ (567, 1007) contains payload of size: 858 bytes
            Image scaled @ (547, 971) contains payload of size: 858 bytes
            Image scaled @ (527, 935) contains payload of size: 858 bytes
            Image scaled @ (507, 899) contains payload of size: 858 bytes
            Image scaled @ (487, 863) contains payload of size: 858 bytes
            Image scaled @ (467, 827) contains payload of size: 858 bytes
            Image scaled @ (447, 791) contains payload of size: 858 bytes
            Image scaled @ (427, 755) contains payload of size: 858 bytes
            Image scaled @ (407, 719) contains payload of size: 858 bytes
        QR code 2: SUCCESSFUL: decoded QR code to: out_test/test-1_png-qrcode21_data.txt

Total QR codes found: 22
Successful decodings: 22
Error count: 0
Writing: out_test/test-1_png-decoded.txt

------------------------------------------------------------------------------------------------------------------------------------
Logically assembled output decoded data file: decoded.txt


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

FAQ/TROUBLESHOOTING/TO-DOs

1. QRDecoder does not like my input .png file (it thinks it is invalid).

  Suggested solution: check the file type.

  Here is an example of a .png file that QRDecoder accepts:

  $ file good.png 
  good.png: PNG image data, 4961 x 7016, 1-bit grayscale, non-interlaced

  Here is an example of a .png file that QRDecoder does NOT like:

  $ file bad.png 
  bad.png: PNG image data, 1239 x 1752, 8-bit/color RGBA, non-interlaced

  The bad one is encoded 8-bit/color RGBA. When we convert it to 1-bit grayscale, QRDecoder will like it.

  $ convert -density 600 -depth 1 -quality 100 bad.png bad_converted.png

  FIXME: build this conversion into QRDecoder.

2. QRDecoder can't seem to decode individual QR codes which I believe are valid.

  Suggested solution: try fiddling with parameter values currently hardcoded into 'qrdecoder.py'. Specifically:
  - y_tolerance/x_tolerance : these define how much whitespace border to allow around a detected QR code.
  - parameter values to: decodeQR2(img_path, limit_dim, increment, downsize, target_data_size, verbose)
    - limit_dim : the lower/upper resize dimension limits (in pixels) when resizing detected QR codes.
    - increment : the amount by which to vary with each resize iteration.

FEATURES WHICH MAY BE GOOD:
- YES (build "attempt" wrapper): AUTO CONVERTING .pdf when they are the input type
- "squaring" in on the last QR code (which usually is smaller) ??
- use image file if already there ??? hmmm.. prolly not... 
- YES: save the "winning" decodable resized image
- YES: take as user input the "suggested number of QR codes to look for eg. (3x2) ??
- YES: for QRENCODER, convert to single .pdf as added option 



