import os


class FileSystemWrapper(object):

    def __init__(self, myfile):

        # File/directory which target filesystem contains.
        self.myfile = myfile

        # Its size (in bytes).      
        self.myfilesize = os.path.getsize(myfile)
     
        # Get information block for filesystem:
        #
        # struct statvfs {
        #   unsigned long  f_bsize;    /* Filesystem block size */
        #   unsigned long  f_frsize;   /* Fragment size */
        #   fsblkcnt_t     f_blocks;   /* Size of fs in f_frsize units */
        #   fsblkcnt_t     f_bfree;    /* Number of free blocks */
        #   fsblkcnt_t     f_bavail;   /* Number of free blocks for
        #                                 unprivileged users */
        #   fsfilcnt_t     f_files;    /* Number of inodes */
        #   fsfilcnt_t     f_ffree;    /* Number of free inodes */
        #   fsfilcnt_t     f_favail;   /* Number of free inodes for
        #                                 unprivileged users */
        #   unsigned long  f_fsid;     /* Filesystem ID */
        #   unsigned long  f_flag;     /* Mount flags */
        #   unsigned long  f_namemax;  /* Maximum filename length */
        # };
        #
        self.st = os.statvfs(path)

        # Get the value of a single block (eg. 4096 bytes):
        self.bs = self.st.f_bsize

        # Get total filesystem size (in blocks):
        self.bc = self.st.f_blocks

        # Get total filesystem size (in bytes):
        self.fssize = (self.bc * self.bs)

        # Get total free space (in bytes):
        self.fsfree = (self.st.f_bfree * self.bs)

    def __str__(self):
        s = ""
        s = s + "File: %s (%d bytes)\n"%(self.myfile, self.myfilesize)
        s = s + "FS block size (bytes): %d\n"%(self.bs)
        s = s + "FS size (blocks): %d\n"%(self.bc)
        s = s + "FS size (bytes): %d\n"%(self.fssize)
        s = s + "FS free space (bytes): %d"%(self.fsfree)
        return s

    def hasFree(self, amount):
        return (self.fsfree > amount)
